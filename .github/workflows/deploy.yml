name: Deploy Application

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Create oss.json
        run: |
          cat > config/oss.json <<EOF
             {
               "OSS": {
                   "accessKeyId": "${{ secrets.OSS_KEY_ID }}",
                   "accessKeySecret": "${{ secrets.OSS_KEY_SECRET}}",
                   "region": "oss-cn-hangzhou",
                   "bucket": "yqq-img"
                }
             }
          EOF

      - name: Setup auth
        run: |
          cat > config/auth.json <<EOF
          {
            "auth":{
             "secret":"${{ secrets.AUTH }}"
             }
          }
          EOF

      - name: Build project
        run: |
          echo "开始构建项目..."
          npm run build
        env:
          NODE_ENV: production

      - name: Run tests (if available)
        run: |
          # 如果有测试脚本就运行，没有就跳过
          if [ -f package.json ] && npm run | grep -q "test"; then
            echo "运行测试..."
            npm test
          else
            echo "没有找到测试脚本，跳过测试"
          fi

      - name: Type check (if available)
        run: |
          # 如果有TypeScript检查就运行
          if [ -f package.json ] && npm run | grep -q "type-check"; then
            echo "运行类型检查..."
            npm run type-check
          else
            echo "没有类型检查脚本，跳过"
          fi

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.ALIYUN_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.ALIYUN_SERVER_PORT }} ${{ secrets.ALIYUN_SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Verify SSH connection
        run: |
          ssh -i ~/.ssh/id_ed25519 -o ConnectTimeout=10 -p ${{ secrets.ALIYUN_SERVER_PORT }} ${{ secrets.ALIYUN_SSH_USER }}@${{ secrets.ALIYUN_SERVER_IP }} "echo 'SSH连接成功'"

      - name: Sync code to server
        run: |
          echo "同步代码到服务器..."
          rsync -avz --delete --exclude='node_modules' --exclude='.git' -e "ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.ALIYUN_SERVER_PORT }}" ./ ${{ secrets.ALIYUN_SSH_USER }}@${{ secrets.ALIYUN_SERVER_IP }}:/root/nest-app/

      - name: Pre-deployment check
        run: |
          echo "检查服务器当前状态..."
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.ALIYUN_SERVER_PORT }} ${{ secrets.ALIYUN_SSH_USER }}@${{ secrets.ALIYUN_SERVER_IP }} "
            echo '当前工作目录:'
            pwd
            echo '检查目标目录:'
            ls -la /root/nest-app/ || echo '目录不存在，将创建'
            echo 'Docker状态:'
            docker ps
          "

      - name: Deploy with Docker Compose
        run: |
          echo "开始部署应用..."
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.ALIYUN_SERVER_PORT }} ${{ secrets.ALIYUN_SSH_USER }}@${{ secrets.ALIYUN_SERVER_IP }} "
            set -e  # 遇到错误立即退出
            
            echo '切换到应用目录...'
            cd /root/nest-app/
            
            echo '停止现有容器...'
            docker-compose down || echo '没有运行中的容器'
            
            echo '构建新镜像...'
            docker-compose build --no-cache
            
            echo '启动新容器...'
            docker-compose up -d
            
            echo '等待容器启动...'
            sleep 10
            
            echo '检查容器状态...'
            docker-compose ps
            
            echo '部署完成!'
          "

      - name: Health check
        run: |
          echo "进行健康检查..."
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.ALIYUN_SERVER_PORT }} ${{ secrets.ALIYUN_SSH_USER }}@${{ secrets.ALIYUN_SERVER_IP }} "
            echo '=== Docker容器状态 ==='
            docker ps
            
            echo '=== 应用健康检查 ==='
            max_attempts=10
            attempt=1
            while [ \$attempt -le \$max_attempts ]; do
              if curl -f http://localhost:8889/health 2>/dev/null; then
                echo '应用健康检查通过!'
                break
              else
                echo \"尝试 \$attempt/\$max_attempts: 应用尚未就绪，等待10秒...\"
                sleep 10
                attempt=\$((attempt + 1))
              fi
            done
            
            if [ \$attempt -gt \$max_attempts ]; then
              echo '健康检查失败!'
              exit 1
            fi
          "

      - name: Deployment success
        if: success()
        run: |
          echo "🎉 部署成功完成!"
          echo "应用已正常运行在服务器上"
